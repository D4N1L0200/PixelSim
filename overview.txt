Previous_Buffer (Screen class -> Cell grid) = Previous state of cells
Next_Buffer (Screen class -> Update list) = Buffer to hold cells that will update next iteration
Out_Buffer (Screen class -> Cell grid) = Current state of cells to be displayed

Basic loop:
    For each cell in the Previous_Buffer:
        If cell is active:
            Check actions with neighboring cells
            Add updates to neighboring cells to Next_Buffer
            Update current cell to Out_Buffer
    Display Out_Buffer

[
[00, 10, 20, 30]
[01, 11, 21, 31]
[02, 12, 22, 32]
]

element Sand {
    @ => _
    _    @
}


element Sand {
	colour "#ffcc00"
	emissive "#ffa34d"
	category "Sandbox"
	prop state SOLID
	prop temperature ROOM
	prop states () => ({
		[HOT]: Glass,
	})

	mimic(Temperature)
	mimic(Powder)
}



element Powder  {
	prop state SOLID
	//category "Rulesets"
	
	given D (element) => element.state > SOLID && element.state !== EFFECT
	select D (atom) => atom
	change D (selected) => selected
	@ => D
	D    @
	
	given S (element) => element.state > SOLID && element.state !== EFFECT
	select S (atom) => atom
	change S (selected) => selected
	given F (element) => element.state > SOLID
	any(xz.rotations) {
		@S => S@
		 F     .
	}
}